# vim: set fileencoding=UTF-8 :
# vim:filetype=python

import os
import process_hazards as ph
import gis

Import('*')

for experiment, config in experiments.iteritems():
    if config['storm_surge_source'][0] == 'unisdr':
        env.Command(
                target=config['storm_surge_zip'],
                source=None,
                action='wget "' + config['storm_surge_source'][1] + '" -O $TARGET')

        env.Command(
                target=[config['storm_surge_vect'].replace('.shp', ext) for ext in ['.shp', '.shx',
                                                                                    '.cpg', '.dbf',
                                                                                    '.prj', '.qpj']],
                source=config['storm_surge_zip'],
                action=['unzip $SOURCE -d $$(dirname $TARGET)',
                        'DIRPATH=$$(dirname $TARGET); NAME=$$(basename $${DIRPATH}); for i in $${DIRPATH}/*; do mv "$$i" "$${DIRPATH}/$$NAME.$${i##*.}"; done'])

        env.Command(
                target=config['storm_surge'],
                source=[config['deltas'],
                        config['storm_surge_vect']],
                action=ph.storm_surge_agg_points)

    env.Command(
            target=config['surge_populations'],
            source=[config['storm_surge'],
                    config['pop_hypso_growth_rslr']],
            action=ph.storm_surge_populations)

    env.Command(
            source=config['surge_populations'],
            target=config['surge_annual_exposure'],
            action=ph.surge_expected_expo)

    if config['dis_future_source'][0] == 'isimip':
        rcpdata = []
        years = range(config['dis_future_years'][0], config['dis_future_years'][1]+1)
        for rcp in config['dis_future_rcps']:
            annual_dis = []
            for year in years:
                remotefile = config['dis_future_source'][1].format(gcm=config['dis_future_gcm'], rcp=rcp, year=year, ext='gdbc.gz')
                localtmp = env.File(config['dis_future_tmp'].format(gcm=config['dis_future_gcm'], rcp=rcp, year=year, ext='{ext}')).abspath
                localnc = config['dis_future_ncs'].format(gcm=config['dis_future_gcm'], rcp=rcp, year=year)

                gdbcgz = config['dis_future_tmp'].format(gcm=config['dis_future_gcm'], rcp=rcp, year=year, ext='gdbc.gz')
                gdbc = env.File(config['dis_future_tmp'].format(gcm=config['dis_future_gcm'], rcp=rcp, year=year, ext='gdbc')).abspath
                tmpnc = env.File(config['dis_future_tmp'].format(gcm=config['dis_future_gcm'], rcp=rcp, year=year, ext='nc')).abspath
                env.Command(
                        source=None,
                        target=gdbcgz,
                        action='scp ' + remotefile + ' $TARGET')
                env.Command(
                        source=gdbcgz,
                        target=localnc,
                        action=['gunzip -k $SOURCE',
                                'rgis2netcdf {} {}'.format(gdbc, tmpnc),
                                'nccopy -d1 -s {} $TARGET'.format(tmpnc),
                                'rm {} {}'.format(gdbc, tmpnc)])

                env.Command(
                        source=[config['basin30_mouths'],
                                localnc],
                        target=config['dis_future_annual'].format(year=year, rcp=rcp),
                        action=ph.extract_future_delta_discharge,
                        year=year)

                annual_dis.append(config['dis_future_annual'].format(year=year, rcp=rcp))

            env.Command(
                    source=annual_dis,
                    target=config['dis_future_rcp'].format(rcp=rcp),
                    action=ph.combine_future_dis_years,
                    years=years)
            rcpdata.append(config['dis_future_rcp'].format(rcp=rcp))

        env.Command(
                source=rcpdata,
                target=config['dis_future'],
                action=ph.combine_future_dis_rcps,
                rcpnames=config['dis_future_rcps'],
                )

    env.Command(
            source=config['dis_future'],
            target=config['dis_future_extremes_basins'],
            action=ph.model_extremes,
            percentile=99,
            return_period=30,
            window=30)
    env.Command(
            source=config['dis_future_extremes_basins'],
            target=config['dis_future_extremes'],
            action=ph.agg_delta_extremes)

