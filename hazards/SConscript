# vim: set fileencoding=UTF-8 :
# vim:filetype=python

import os
import process_hazards as ph
import gis

Import('*')

for experiment, config in experiments.iteritems():
    if config['storm_surge_source'][0] == 'unisdr':
        env.Command(
                target=config['storm_surge_zip'],
                source=None,
                action='wget "' + config['storm_surge_source'][1] + '" -O $TARGET')

        env.Command(
                target=[config['storm_surge_vect'].replace('.shp', ext) for ext in ['.shp', '.shx',
                                                                                    '.cpg', '.dbf',
                                                                                    '.prj', '.qpj']],
                source=config['storm_surge_zip'],
                action=['unzip $SOURCE -d $$(dirname $TARGET)',
                        'DIRPATH=$$(dirname $TARGET); NAME=$$(basename $${DIRPATH}); for i in $${DIRPATH}/*; do mv "$$i" "$${DIRPATH}/$$NAME.$${i##*.}"; done'])

        env.Command(
                target=config['storm_surge'],
                source=[config['deltas'],
                        config['storm_surge_vect']],
                action=ph.storm_surge_agg_points)

    env.Command(
            target=config['surge_populations'],
            source=[config['storm_surge'],
                    config['pop_hypso_growth_rslr']],
            action=ph.storm_surge_populations)

    env.Command(
            source=config['surge_populations'],
            target=config['surge_annual_exposure'],
            action=ph.surge_expected_expo)

    if config['dis_future_source'][0] == 'isimip':
        rcpdata = []
        years = range(config['dis_future_years'][0], config['dis_future_years'][1]+1)
        for rcp in config['dis_future_rcps']:
            annual_dis = []
            for year in years:
                remotefile = config['dis_future_source'][1].format(gcm=config['dis_future_gcm'], rcp=rcp, year=year, ext='gdbc.gz')
                localtmp = env.File(config['dis_future_tmp'].format(gcm=config['dis_future_gcm'], rcp=rcp, year=year, ext='{ext}')).abspath
                localnc = config['dis_future_ncs'].format(gcm=config['dis_future_gcm'], rcp=rcp, year=year)

                gdbcgz = config['dis_future_tmp'].format(gcm=config['dis_future_gcm'], rcp=rcp, year=year, ext='gdbc.gz')
                gdbc = env.File(config['dis_future_tmp'].format(gcm=config['dis_future_gcm'], rcp=rcp, year=year, ext='gdbc')).abspath
                tmpnc = env.File(config['dis_future_tmp'].format(gcm=config['dis_future_gcm'], rcp=rcp, year=year, ext='nc')).abspath
                env.Command(
                        source=None,
                        target=gdbcgz,
                        action='scp ' + remotefile + ' $TARGET')
                env.Command(
                        source=gdbcgz,
                        target=localnc,
                        action=['gunzip -k $SOURCE',
                                'rgis2netcdf {} {}'.format(gdbc, tmpnc),
                                'nccopy -d1 -s {} $TARGET'.format(tmpnc),
                                'rm {} {}'.format(gdbc, tmpnc)])

                env.Command(
                        source=[config['basin30_mouths'],
                                localnc],
                        target=config['dis_future_annual'].format(year=year, rcp=rcp),
                        action=ph.extract_future_delta_discharge,
                        year=year)

                annual_dis.append(config['dis_future_annual'].format(year=year, rcp=rcp))

            env.Command(
                    source=annual_dis,
                    target=config['dis_future_rcp'].format(rcp=rcp),
                    action=ph.combine_future_dis_years,
                    years=years)
            rcpdata.append(config['dis_future_rcp'].format(rcp=rcp))

        env.Command(
                source=rcpdata,
                target=config['dis_future'],
                action=ph.combine_future_dis_rcps,
                rcpnames=config['dis_future_rcps'],
                )

    env.Command(
            source=config['dis_future'],
            target=config['dis_future_extremes_basins'],
            action=ph.model_extremes,
            percentile=99,
            return_period=30,
            window=30)
    env.Command(
            source=config['dis_future_extremes_basins'],
            target=config['dis_future_extremes'],
            action=ph.agg_delta_extremes)

    if config['waves_future_source'][0] == 'csiro':
        gcm_files = []
        for gcm in config['waves_future_gcms']:
            # forecast_files = []
            # for forecast in config['waves_future_forecasts']:
                # rcp_files = []
            scenario_files = []
            for forecast, rcp in config['waves_future_scenarios']:
                if forecast == 'HISTORICAL':
                    rcp_url = ''
                else:
                    rcp_url = rcp
                monthlyfiles = []

                # run this step directly, otherwise wont have list of files to create targets from
                # supposedly ways to make this work through scons (dynamic builds) but isn't working
                yyyymm_list = config['waves_future_nclist'].format(gcm=gcm, forecast=forecast, rcp=rcp)
                if not os.path.exists(env.File(yyyymm_list).abspath):
                    env_ = {
                            'urlformat':config['waves_future_source'][1].format(gcm=gcm, forecast=forecast, rcp=rcp_url, yyyymm=''),
                            }
                    ph.get_waves_nclist(
                            env=env_,
                            source=None,
                            target=[env.File(yyyymm_list).abspath])
                with open(env.File(yyyymm_list).abspath, 'r') as datelist:
                    for yyyymm in datelist.readlines():
                        yyyymm = yyyymm.strip()
                        monthlydata=config['waves_future_monthly'].format(gcm=gcm, forecast=forecast, rcp=rcp, yyyymm=yyyymm),
                        env.Command(
                                source=config['waves_future_delta_indices'],
                                target=monthlydata,
                                action=ph.process_wave_month,
                                url=config['waves_future_source'][1].format(gcm=gcm, forecast=forecast, rcp=rcp_url, yyyymm=yyyymm))
                        monthlyfiles.append(monthlydata)

                scenario_data = config['waves_future_rcp_data'].format(gcm=gcm, forecast=forecast, rcp=rcp)
                env.Command(
                        source=monthlyfiles,
                        target=scenario_data,
                        action=ph.concat_waves_times,
                        )

                ref_forecast, ref_rcp = config['waves_future_refscenario']
                ref_waves = config['waves_future_rcp_data'].format(gcm=gcm, forecast=ref_forecast, rcp=ref_rcp)
                scenario_zscore = config['waves_future_rcp_zscores'].format(gcm=gcm, forecast=forecast, rcp=rcp)
                scenario_zscore_pixels = config['waves_future_rcp_zscores_pixels'].format(gcm=gcm, forecast=forecast, rcp=rcp)
                # import ipdb;ipdb.set_trace()
                if forecast == 'HISTORICAL':
                    # workaround scons bug, repeated source files work, but not when the command is defined twice, scons collapses the repeated source files to a list with just a single one and complains about multiple ways to build
                    # check in action for lenght of sources list
                    sources = [scenario_data]
                else:
                    sources = [ref_waves, scenario_data]
                env.Command(
                        source=sources,
                        target=[scenario_zscore_pixels,
                                scenario_zscore],
                        action=ph.compute_waves_extremes,
                        percentile=99,
                        return_period=30)
                scenario_files.append(scenario_zscore)

            gcm_file = config['waves_future_gcm_zscores'].format(gcm=gcm)
            env.Command(
                    source=scenario_files,
                    target=gcm_file,
                    action=ph.agg_wave_zscores,
                    level_names=['Window', 'RCP'],
                    levels=config['waves_future_scenarios'])
            gcm_files.append(gcm_file)

        env.Command(
                source=gcm_files,
                target=config['waves_future_extremes'],
                action=ph.agg_wave_zscores,
                level_names=['GCM'],
                levels=config['waves_future_gcms'])

        # assumes same delta grid indices for each gmc/forecast/rcp nc file
        # just use last gcm/forecast/rcp
        # requires list of ncfiles, downloaded above
        env.Command(
                source=config['deltas'],
                target=config['waves_future_delta_indices'],
                action=ph.waves_find_delta_indices,
                url=config['waves_future_source'][1].format(gcm=gcm, forecast=forecast, rcp=rcp, yyyymm=yyyymm),
                nullval=-999.0)


