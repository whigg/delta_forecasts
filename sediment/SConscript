# vim: set fileencoding=UTF-8 :
# vim:filetype=python

import os
import process_sediment as ps
import gis

Import('*')

# convert rgis files to netCDF, use BQART model to estimate sed flux under
# different anthro conditions (including none), use to estimate natural
# subsidence rates based on sed flux, sediment retention ratio (see Syvitski and
# Saito 2007 for ratios) and delta surface area

for experiment, config in experiments.iteritems():

    env.Command(
            source=[config['basins_rast'].format(ver='', ext='tif'),
                    config['relief_rast'].format(ver='', ext='tif'),
                    config['runoff_rast'].format(ver='', ext='tif'),
                    config['basin_ids']],
            target=config['basin_res_potential'],
            action=ps.compute_res_potential)

    if experiment != 'pristine':
        if config['reservoir_source'][0] == 'grand':
            env.Command(
                    source=[config['reservoir_source'][1],
                            config['basins_rast'].format(ver='', ext='tif')],
                    target=config['reservoir_rast'].format(ver='', ext='tif'),
                    action=ps.rasterize_grand_dams)

        if config.get('reservoir_adj_source'):
            res_rast = config['reservoir_adj'].format(ver='', ext='tif')
            if config['reservoir_adj_source'][0] == 'factor':
                factor = config['reservoir_adj_source'][1]
                myCommand(
                        source=config['reservoir_rast'].format(ver='', ext='tif'),
                        target=res_rast,
                        action=gis.multiply_rast,
                        factor=factor)

            elif config['reservoir_adj_source'][0] == 'zarfl2015':
                env.Command(
                        source=[config['reservoir_adj_source'][1],
                                config['delta_zeros']],
                        target=config['reservoir_adj'].format(ver='', ext='pd'),
                        action=ps.parse_zarfl_xls)

                env.Command(
                        source=[config['reservoir_rast'].format(ver='', ext='tif'),
                                config['reservoir_adj'].format(ver='', ext='pd'),
                                config['discharge_rast'].format(ver='', ext='tif'),
                                config['basins_rast'].format(ver='', ext='tif'),
                                config['basin_ids']],
                        target=res_rast,
                        action=ps.add_new_reservoirs)

            elif config['reservoir_adj_source'][0] == 'match_basin_utilization':
                env.Command(
                        source=[config['reservoir_rast'].format(ver='', ext='tif'),
                                config['basins_rast'].format(ver='', ext='tif'),
                                config['basin_ids']],
                        target=config['res_target_size_distribution'],
                        action=ps.estimate_reservoir_size_distribution,
                        ref_basin=config['reservoir_adj_source'][1])

                env.Command(
                        source=[config['reservoir_rast'].format(ver='', ext='tif'),
                                config['res_potential']],
                        target=config['reservoir_adj'].format(ver='', ext='pd'),
                        action=ps.scale_reservoirs_by_basin_utilization,
                        ref_basin=config['reservoir_adj_source'][1])

        else:
            res_rast = config['reservoir_rast'].format(ver='', ext='tif')

        env.Command(
                source=[res_rast,
                        config['discharge_rast'].format(ver='', ext='tif'),
                        config['basins_rast'].format(ver='', ext='tif'),
                        config['basin_ids']],
                target=config['Te'],
                action=ps.res_trapping)

        env.Command(
                source=[config['per_capita_gdp'].format(ver='', ext='pd'),
                        config['pop_dens'].format(ver='', ext='pd')],
                target=config['Eh'],
                action=ps.compute_Eh)

    env.Command(
            source=config['ice'].format(ver='', ext='pd'),
            target=config['I'],
            action=ps.compute_I)

    env.Command(
            source=[config['I'],
                    config['lithology'].format(ver='', ext='pd'),
                    config['Te'],
                    config['Eh']],
            target=config['B'],
            action=ps.compute_B)

    env.Command(
            source=[config['B'],
                    config['discharge'].format(ver='', ext='pd'),
                    config['basin_areas'],
                    config['relief'].format(ver='', ext='pd'),
                    config['airtemp'].format(ver='', ext='pd')],
            target=config['Qs'],
            action=ps.compute_Qs)

    myCommand(
            source=config['Qs'],
            target=config['sed_flux_plot'].format(ext='png'),
            action=ps.plot_delta_scalars,
            scenarios=config['name'],
            ylabel='Sediment flux, kg/s',
            xlabel='Delta',
            title='Sediment flux',
            logy=False,
            )

for expA in experiments.keys():
    for expB in experiments[expA]['compare_with']:
        scenarios = expA + '_' + expB
        myCommand(
                source=[experiments[expA]['Qs'],
                        experiments[expB]['Qs']],
                target=experiments[expA]['sed_flux_comparison_plot'].format(scenarios=scenarios, ext='png'),
                action=ps.plot_delta_scalars,
                scenarios=[experiments[expA]['name'], experiments[expB]['name']],
                ylabel='Sediment flux, kg/s',
                xlabel='Delta',
                title='Sediment flux scenario differences',
                logy=True,
                )

        myCommand(
                source=[experiments[expA]['Qs'],
                        experiments[expB]['Qs']],
                target=experiments[expA]['sed_flux_change_plot'].format(scenarios=scenarios, expA=expA, expB=expB, ext='png'),
                action=ps.plot_scalars_percent_change,
                scenarios=[experiments[expA]['name'], experiments[expB]['name']],
                ylabel='Sediment flux change, %',
                xlabel='Delta',
                title='Sediment flux scenario % change',
                )
        myCommand(
                source=[experiments[expB]['Qs'],
                        experiments[expA]['Qs']],
                target=experiments[expA]['sed_flux_change_plot'].format(scenarios=scenarios, expA=expB, expB=expA, ext='png'),
                action=ps.plot_scalars_percent_change,
                scenarios=[experiments[expB]['name'], experiments[expA]['name']],
                ylabel='Sediment flux change, %',
                xlabel='Delta',
                title='Sediment flux scenario % change',
                )

        plot_deltas = ['Amazon', 'Ganges', 'Mekong']
        myCommand(
            source=[experiments[expA]['rslr_land'],
                    experiments[expB]['rslr_land']],
            target=experiments[expA]['rslr_timeseries_plot'].format(scenarios=scenarios, expA=expA, expB=expB, ext='png'),
            action=[ps.plot_rslr_timeseries,
                    'convert -trim $TARGET $TARGET'],
            scenarios=[experiments[expB]['name'], experiments[expA]['name']],
            deltas=plot_deltas,
            slr_cur=experiments['contemp']['eustatic_slr'],
            slr_2100_RCP2p6=experiments['contemp']['slr_rate_2100_RCP2.6'],
            slr_2100_RCP8p5=experiments['contemp']['slr_rate_2100_RCP8.5'],
            years=[2000, 2100],
            )
