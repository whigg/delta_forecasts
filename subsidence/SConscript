# vim: set fileencoding=UTF-8 :
# vim:filetype=python

import os
import process_subsidence as ps
import gis

Import('*')


###
# Alternative: bqart sediment flux to estimate natural subsidence is sensitve to
# errors and the size of the delta, plus need to make several assumptions about
# sed density, fractionation, (and biogenic production?) to estimate rslr.
# Instead, use literature values of RSLR to back out natural subsidence.
# probably more accurate than use of literature values of natural subsidence and
# computing rslr per Ericson 2006.  Lit values of contemporary RSLR, back out
# relationship between sediment flux and agg rate (solve for combined
# retention/seddensity/biogenic terms)
###


env.Command(
        source=experiments['pristine']['sed_aggradation'],
        target=experiments['pristine']['natural_subsidence'],
        action=ps.steady_state_subsidence,
        eustatic_slr=experiments['pristine']['eustatic_slr'])


for experiment, config in experiments.iteritems():
    env.Command(
            source=[config['delta_zeros'],
                    config['sed_morph_source'][1]],
            target=config['sed_retention'],
            action=ps.import_sed_retention_ratio)

    env.Command(
            source=[config['delta_zeros'],
                    config['rslr_lit_source'][1]],
            target=config['rslr_lit'],
            mean_weighting=config['rslr_lit_mean_weight'],
            action=ps.import_rslr_lit)

    env.Command(
            source=[config['delta_areas'],
                    config['Qs']],
            target=config['sed_aggradation'],
            action=ps.sed_aggradation)

    # accelerated compaction:
    # groundwater
    if config['groundwater_source'][0] == 'wada':
        env.Command(
                source=config['groundwater_source'][1],
                target=config['groundwater_rast'].format(ver='', ext='tif'),
                action='gdal_translate -of GTiff -a_srs "epsg:4326" $SOURCE $TARGET')
    elif config['groundwater_source'][0] is 'zeros':
        env.Command(
                source=config['zeros_rast'],
                target=config['groundwater_rast'],
                action='cp $SOURCE $TARGET')

    env.Command(
            source=[config['deltas'],
                    config['groundwater_rast'].format(ver='', ext='tif')],
            target=config['groundwater'].format(ver='.1'),
            action=gis.delta_zonal_stats)
    env.Command(
            source=config['groundwater'].format(ver='.1'),
            target=config['groundwater'].format(ver=''),
            action=ps.clean_groundwater_stats)
    env.Command(
            source=[config['groundwater'].format(ver=''),
                    config['delta_areas']],
            target=config['groundwater_drawdown'],
            action=ps.compute_drawdown)
    env.Command(
            source=[config['groundwater_drawdown'],
                    config['natural_subsidence']],
            target=config['groundwater_subsidence'],
            action=ps.groundwater_subsidence)

    # oil/gas
    if config['oilgas_source'][0] is 'zeros':
        env.Command(
                source=config['delta_zeros'],
                target=config['oilgas_subsidence'],
                action='cp $SOURCE $TARGET')
    else:
        if config['oilgas_source'][0] == 'usgs':
            env.Command(
                    source=config['oilgas_source'][1],
                    target=config['oilgas_vect'],
                    action=['cp $$(dirname $SOURCE)/* $$(dirname $TARGET)',
                            'DIRPATH=$$(dirname $TARGET); NAME=$$(basename $${DIRPATH}); for i in $${DIRPATH}/*; do mv "$$i" "$${DIRPATH}/$$NAME.$${i##*.}"; done']
                        )
            env.Command(
                    source=[config['oilgas_vect'],
                            config['deltas']],
                    target=config['oilgas'],
                    action=ps.oilgas_locations)
        env.Command(
                source=config['oilgas'],
                target=config['oilgas_subsidence'],
                action=ps.oilgas_subsidence)


    # accelerated sea-level rise
    env.Command(
            source=[config['sed_aggradation'],
                    config['natural_subsidence'],
                    config['groundwater_subsidence'],
                    config['oilgas_subsidence']],
            eustatic_slr=config['eustatic_slr'],
            target=config['rslr'],
            action=ps.compute_rslr)

    env.Command(
            source=[config['natural_subsidence'],
                    config['sed_aggradataion'],
                    config['groundwater_drawdown'],
                    config['oilgas'],
                    config['rslr_lit_source'][1]],
            eustatic_slr=config['eustatic_slr'],
            target=config['rslr_regres'],
            action=ps.rslr_regression_model)
