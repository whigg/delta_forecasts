# vim: set fileencoding=UTF-8 :
# vim:filetype=python

import os
import process_subsidence as ps
import process_sediment as psed
import gis

Import('*')


###
# Alternative: bqart sediment flux to estimate natural subsidence is sensitve to
# errors and the size of the delta, plus need to make several assumptions about
# sed density, fractionation, (and biogenic production?) to estimate rslr.
# Instead, use literature values of RSLR to back out natural subsidence.
# probably more accurate than use of literature values of natural subsidence and
# computing rslr per Ericson 2006.  Lit values of contemporary RSLR, back out
# relationship between sediment flux and agg rate (solve for combined
# retention/seddensity/biogenic terms)
###


env.Command(
        source=experiments['pristine']['sed_aggradation'],
        target=experiments['pristine']['natural_subsidence'],
        action=ps.steady_state_subsidence,
        eustatic_slr=experiments['pristine']['eustatic_slr'])

env.Command(
        source=experiments['pristine']['natural_subsidence'],
        target=experiments['pristine']['natural_subsidence_plot'],
        action=psed.plot_delta_scalars,
        ylabel='Subsidence rate, mm/yr',
        xlabel='Delta',
        title='Estimated natural subsidence rates',
        )


for experiment, config in experiments.iteritems():
    env.Command(
            source=[config['delta_zeros'],
                    config['sed_morph_source'][1]],
            target=config['sed_retention'],
            action=ps.import_sed_retention_ratio)

    env.Command(
            source=[config['delta_zeros'],
                    config['sed_morph_source'][1]],
            target=config['accomodation_space'],
            action=ps.import_accomodation_space)

    env.Command(
            source=[config['delta_zeros'],
                    config['rslr_lit_source'][1]],
            target=config['rslr_lit'],
            mean_weighting=config['rslr_lit_mean_weight'],
            action=ps.import_rslr_lit)

    env.Command(
            source=[config['delta_areas'],
                    config['Qs']],
            target=config['sed_aggradation'],
            action=ps.sed_aggradation)
    # env.Command(
            # source=[config['delta_areas'],
                    # config['Qs'],
                    # config['sed_retention']],
            # target=config['sed_aggradation'],
            # action=ps.sed_aggradation_variable_retention)

    # accelerated compaction:
    # groundwater
    if config['groundwater_source'][0] == 'wada':
        env.Command(
                source=config['groundwater_source'][1],
                target=config['groundwater_rast'].format(ver='', ext='tif'),
                action='gdal_translate -of GTiff -a_srs "epsg:4326" $SOURCE $TARGET')
    elif config['groundwater_source'][0] == 'zeros':
        env.Command(
                source=config['zeros_rast'],
                target=config['groundwater_rast'].format(ver='', ext='tif'),
                action='cp $SOURCE $TARGET')

    env.Command(
            source=[config['deltas'],
                    config['groundwater_rast'].format(ver='', ext='tif')],
            target=config['groundwater'].format(ver='.1'),
            action=gis.delta_zonal_stats)
    env.Command(
            source=config['groundwater'].format(ver='.1'),
            target=config['groundwater'].format(ver=''),
            action=ps.clean_groundwater_stats)
    env.Command(
            source=[config['groundwater'].format(ver=''),
                    config['delta_areas']],
            target=config['groundwater_drawdown'],
            action=ps.compute_drawdown)
    env.Command(
            source=[config['groundwater_drawdown'],
                    config['natural_subsidence']],
            target=config['groundwater_subsidence'],
            action=ps.groundwater_subsidence)

    # oil/gas
    if config['oilgas_source'][0] == 'zeros':
        env.Command(
                source=config['delta_zeros'],
                target=config['oilgas'],
                action='cp $SOURCE $TARGET')
    else:
        if config['oilgas_source'][0] == 'usgs':
            env.Command(
                    source=config['oilgas_source'][1],
                    target=config['oilgas_vect'],
                    action=['cp $$(dirname $SOURCE)/* $$(dirname $TARGET)',
                            'DIRPATH=$$(dirname $TARGET); NAME=$$(basename $${DIRPATH}); for i in $${DIRPATH}/*; do mv "$$i" "$${DIRPATH}/$$NAME.$${i##*.}"; done']
                        )
            env.Command(
                    source=[config['oilgas_vect'],
                            config['deltas']],
                    target=config['oilgas'],
                    action=ps.oilgas_locations)
    env.Command(
            source=config['oilgas'],
            target=config['oilgas_subsidence'],
            action=ps.oilgas_subsidence)


    # Glacial Isostatic Adjustment
    if config['gia_source'][0] == 'grace':
        env.Command(
                source=config['gia_source'][1],
                target=config['gia_uplift'].format(ext='tif'),
                action='gdal_translate -a_srs "EPSG:4326" -a_ullr 0 90 360 -90 NETCDF:"$SOURCE":{} $TARGET'.format(config['gia_model']))
        env.Command(
                source=[config['deltas'],
                        config['gia_uplift'].format(ext='tif')],
                target=config['gia_uplift'].format(ext='pd'),
                action=ps.extract_gia,
                gia_model=config['gia_model'])

    # accelerated sea-level rise
    env.Command(
            source=[config['sed_aggradation'],
                    config['natural_subsidence'],
                    config['groundwater_subsidence'],
                    config['oilgas_subsidence'],
                    config['gia_uplift'].format(ext='pd')],
            eustatic_slr=config['eustatic_slr'],
            target=config['rslr'],
            action=ps.compute_rslr)

    env.Command(
            source=[config['sed_aggradation'],
                    config['natural_subsidence'],
                    config['groundwater_subsidence'],
                    config['oilgas_subsidence'],
                    config['gia_uplift'].format(ext='pd')],
            eustatic_slr=0,
            target=config['rslr_land'],
            action=ps.compute_rslr)

    if experiment != 'pristine':
        env.Command(
                source=[config['natural_subsidence'],
                        config['sed_aggradation'],
                        config['groundwater_subsidence'],
                        config['oilgas_subsidence'],
                        config['rslr_lit']],
                eustatic_slr=config['eustatic_slr'],
                target=[config['rslr_regress'].format(ext='pd'),
                        config['rslr_regress'].format(ext='txt')],
                action=ps.rslr_regression_model)

for expA in experiments.keys():
    for expB in experiments[expA]['compare_with']:
        if 'pristine' in [expA, expB]:
            continue
        scenarios = expA + '_' + expB
        env.Command(
                source=[experiments[expA]['rslr'],
                        experiments[expB]['rslr']],
                target=experiments[expA]['rslr_comparison_plot'].format(scenarios=scenarios, ext='png'),
                action=psed.plot_delta_scalars,
                scenarios=[experiments[expA]['name'], experiments[expB]['name']],
                ylabel='RSLR, mm/yr',
                xlabel='Delta',
                title='RSLR scenario differences',
                logy=False,
                )

        env.Command(
                source=[experiments[expA]['rslr'],
                        experiments[expB]['rslr']],
                target=experiments[expA]['rslr_change_plot'].format(scenarios=scenarios, expA=expA, expB=expB, ext='png'),
                action=psed.plot_scalars_percent_change,
                scenarios=[experiments[expA]['name'], experiments[expB]['name']],
                ylabel='RSLR change, %',
                xlabel='Delta',
                title='RSLR scenario % change',
                )
        env.Command(
                source=[experiments[expB]['rslr'],
                        experiments[expA]['rslr']],
                target=experiments[expA]['rslr_change_plot'].format(scenarios=scenarios, expA=expB, expB=expA, ext='png'),
                action=psed.plot_scalars_percent_change,
                scenarios=[experiments[expB]['name'], experiments[expA]['name']],
                ylabel='RSLR change, %',
                xlabel='Delta',
                title='RSLR scenario % change',
                )
