# vim: set fileencoding=UTF-8 :
# vim:filetype=python

import os
import process_subsidence as ps
import process_sediment as psed
import gis

Import('*')


###
# Alternative: bqart sediment flux to estimate natural subsidence is sensitve to
# errors and the size of the delta, plus need to make several assumptions about
# sed density, fractionation, (and biogenic production?) to estimate rslr.
# Instead, use literature values of RSLR to back out natural subsidence.
# probably more accurate than use of literature values of natural subsidence and
# computing rslr per Ericson 2006.  Lit values of contemporary RSLR, back out
# relationship between sediment flux and agg rate (solve for combined
# retention/seddensity/biogenic terms)
###

# only compute natural subsidence for "pristine-like" scenarios
for experiment in ['pristine', 'retention-high', 'pristine-progradation', 'pristine-const-nat-sub']:
    config = experiments[experiment]

    if experiment == 'pristine-const-nat-sub':
        myCommand(
                source=config['delta_ones'],
                target=config['natural_subsidence_low_retention'],
                sub_rate=config['sub_rate_low_retention'],
                action=ps.const_nat_subsidence)
        myCommand(
                source=config['delta_ones'],
                target=config['natural_subsidence'],
                sub_rate=config['sub_rate'],
                action=ps.const_nat_subsidence)
        myCommand(
                source=config['delta_ones'],
                target=config['natural_subsidence_high_retention'],
                sub_rate=config['sub_rate_high_retention'],
                action=ps.const_nat_subsidence)
    else:
        myCommand(
                source=config['sed_aggradation_low_retention'],
                target=config['natural_subsidence_low_retention'],
                action=ps.steady_state_subsidence,
                eustatic_slr=config['eustatic_slr'])
        myCommand(
                source=config['sed_aggradation'],
                target=config['natural_subsidence'],
                action=ps.steady_state_subsidence,
                eustatic_slr=config['eustatic_slr'])
        myCommand(
                source=config['sed_aggradation_high_retention'],
                target=config['natural_subsidence_high_retention'],
                action=ps.steady_state_subsidence,
                eustatic_slr=config['eustatic_slr'])
        env.Command(
                source=[config['natural_subsidence_low_retention'],
                        config['natural_subsidence'],
                        config['natural_subsidence_high_retention']],
                target=config['natural_subsidence_all_retention'],
                action=ps.retention_merge_to_df)

    if experiment in ['pristine', 'pristine-progradation', 'pristine-const-nat-sub']:
        yscale = ('symlog', {'linthreshy': 1, 'linscaley': 0.5})
        ylims = [-.3, 60]
        annot = True
    else:
        yscale = ('linear', {})
        ylims = None
        annot = False
    myCommand(
            source=config['natural_subsidence'],
            target=config['natural_subsidence_plot'],
            action=[psed.plot_delta_scalars,
                    'convert -trim $TARGET $TARGET'],
            scenarios=[config['name']],
            ylabel='Subsidence rate, mm/yr',
            xlabel='Delta',
            title='Modeled natural subsidence rates',
            ylims=ylims,
            yscale=yscale,
            annot=annot,
            npanels=2,
            )


myCommand(
        source=[experiments['contemp']['rslr_lit'],
                experiments['pristine']['Qs'],
                experiments['contemp']['Qs'],
                experiments['contemp']['groundwater_subsidence'],
                experiments['contemp']['oilgas_subsidence'],
                experiments['contemp']['gia_uplift'].format(ext='pd'),
                experiments['contemp']['delta_areas']],
        target=experiments['pristine']['retention_rate_rslr_lit'],
        action=ps.compute_retention_from_rslr_lit,
        sed_dens=experiments['contemp']['sed_dens'], # g/cm**3
        sed_poro=experiments['contemp']['sed_porosity'], # g/cm**3
        prist_slr=experiments['pristine']['eustatic_slr'],
        contemp_slr=experiments['contemp']['eustatic_slr'])


for experiment, config in experiments.iteritems():
    env.Command(
            source=[config['delta_zeros'],
                    config['sed_morph_source'][1]],
            target=config['sed_retention_lit'],
            action=ps.import_sed_retention_ratio)

    env.Command(
            source=[config['delta_zeros'],
                    config['sed_morph_source'][1]],
            target=config['accomodation_space'],
            action=ps.import_accomodation_space)

    myCommand(
            source=[config['delta_zeros'],
                    config['rslr_lit_source'][1]],
            target=config['rslr_lit'],
            mean_weighting=config['rslr_lit_mean_weight'],
            action=ps.import_rslr_lit)

    if experiment == 'pristine-progradation':
        myCommand(
                source=[config['delta_areas'],
                        config['Qs']],
                target=config['sed_aggradation_low_retention'],
                action=ps.sed_aggradation_with_progradation,
                sed_dens=config['sed_dens'],
                sed_poro=config['sed_porosity'], # g/cm**3
                retention=config['retention_frac_low'],
                delta_age=8000.0)
        myCommand(
                source=[config['delta_areas'],
                        config['Qs']],
                target=config['sed_aggradation'],
                action=ps.sed_aggradation_with_progradation,
                sed_dens=config['sed_dens'],
                sed_poro=config['sed_porosity'], # g/cm**3
                retention=config['retention_frac'],
                delta_age=8000.0)
        myCommand(
                source=[config['delta_areas'],
                        config['Qs']],
                target=config['sed_aggradation_high_retention'],
                action=ps.sed_aggradation_with_progradation,
                sed_dens=config['sed_dens'],
                sed_poro=config['sed_porosity'], # g/cm**3
                retention=config['retention_frac_high'],
                delta_age=8000.0)
    else:
        myCommand(
                source=[config['delta_areas'],
                        config['Qs']],
                target=config['sed_aggradation_low_retention'],
                action=ps.sed_aggradation,
                sed_dens=config['sed_dens'],
                sed_poro=config['sed_porosity'], # g/cm**3
                retention=config['retention_frac_low'])
        myCommand(
                source=[config['delta_areas'],
                        config['Qs']],
                target=config['sed_aggradation'],
                action=ps.sed_aggradation,
                sed_dens=config['sed_dens'],
                sed_poro=config['sed_porosity'], # g/cm**3
                retention=config['retention_frac'])
        myCommand(
                source=[config['delta_areas'],
                        config['Qs']],
                target=config['sed_aggradation_high_retention'],
                action=ps.sed_aggradation,
                sed_dens=config['sed_dens'],
                sed_poro=config['sed_porosity'], # g/cm**3
                retention=config['retention_frac_high'])

    env.Command(
            source=[config['sed_aggradation_low_retention'],
                    config['sed_aggradation'],
                    config['sed_aggradation_high_retention']],
            target=config['sed_aggradation_all_retention'],
            action=ps.retention_merge_to_df)
    # env.Command(
            # source=[config['delta_areas'],
                    # config['Qs'],
                    # config['sed_retention']],
            # target=config['sed_aggradation'],
            # action=ps.sed_aggradation_variable_retention)

    # accelerated compaction:
    # groundwater
    if config['groundwater_source'][0] == 'wada':
        env.Command(
                source=config['groundwater_source'][1],
                target=config['groundwater_rast'].format(ver='', ext='tif'),
                action='gdal_translate -of GTiff -a_srs "epsg:4326" $SOURCE $TARGET')
    elif config['groundwater_source'][0] == 'zeros':
        env.Command(
                source=config['zeros_rast'],
                target=config['groundwater_rast'].format(ver='', ext='tif'),
                action='cp $SOURCE $TARGET')

    env.Command(
            source=[config['deltas'],
                    config['groundwater_rast'].format(ver='', ext='tif')],
            target=config['groundwater'].format(ver='.1'),
            action=gis.delta_zonal_stats)
    env.Command(
            source=config['groundwater'].format(ver='.1'),
            target=config['groundwater'].format(ver=''),
            action=ps.clean_groundwater_stats)
    env.Command(
            source=[config['groundwater'].format(ver=''),
                    config['delta_areas']],
            target=config['groundwater_drawdown'],
            action=ps.compute_drawdown)
    env.Command(
            source=[config['groundwater_drawdown'],
                    config['natural_subsidence']],
            target=config['groundwater_subsidence'],
            action=ps.groundwater_subsidence)

    # oil/gas
    if config['oilgas_source'][0] == 'zeros':
        env.Command(
                source=config['delta_zeros'],
                target=config['oilgas'],
                action='cp $SOURCE $TARGET')
    else:
        if config['oilgas_source'][0] == 'usgs':
            env.Command(
                    source=config['oilgas_source'][1],
                    target=config['oilgas_vect'],
                    action=['cp $$(dirname $SOURCE)/* $$(dirname $TARGET)',
                            'DIRPATH=$$(dirname $TARGET); NAME=$$(basename $${DIRPATH}); for i in $${DIRPATH}/*; do mv "$$i" "$${DIRPATH}/$$NAME.$${i##*.}"; done']
                        )
            env.Command(
                    source=[config['oilgas_vect'],
                            config['deltas']],
                    target=config['oilgas'],
                    action=ps.oilgas_locations)
    env.Command(
            source=config['oilgas'],
            target=config['oilgas_subsidence'],
            action=ps.oilgas_subsidence)


    # Glacial Isostatic Adjustment
    if config['gia_source'][0] == 'grace':
        env.Command(
                source=config['gia_source'][1],
                target=config['gia_uplift'].format(ext='tif'),
                action='gdal_translate -a_srs "EPSG:4326" -a_ullr 0 90 360 -90 NETCDF:"$SOURCE":{} $TARGET'.format(config['gia_model']))
        myCommand(
                source=[config['deltas'],
                        config['gia_uplift'].format(ext='tif')],
                target=config['gia_uplift'].format(ext='pd'),
                action=ps.extract_gia,
                gia_model=config['gia_model'])

    # accelerated sea-level rise
    myCommand(
            source=[config['sed_aggradation_low_retention'],
                    config['natural_subsidence_low_retention'],
                    config['groundwater_subsidence'],
                    config['oilgas_subsidence'],
                    config['gia_uplift'].format(ext='pd')],
            eustatic_slr=config['eustatic_slr'],
            target=config['rslr_low_retention'],
            action=ps.compute_rslr)
    myCommand(
            source=[config['sed_aggradation'],
                    config['natural_subsidence'],
                    config['groundwater_subsidence'],
                    config['oilgas_subsidence'],
                    config['gia_uplift'].format(ext='pd')],
            eustatic_slr=config['eustatic_slr'],
            target=config['rslr'],
            action=ps.compute_rslr)
    myCommand(
            source=[config['sed_aggradation_high_retention'],
                    config['natural_subsidence_high_retention'],
                    config['groundwater_subsidence'],
                    config['oilgas_subsidence'],
                    config['gia_uplift'].format(ext='pd')],
            eustatic_slr=config['eustatic_slr'],
            target=config['rslr_high_retention'],
            action=ps.compute_rslr)
    env.Command(
            source=[config['rslr_low_retention'],
                    config['rslr'],
                    config['rslr_high_retention']],
            target=config['rslr_all_retention'],
            action=ps.retention_merge_to_df)

    myCommand(
            source=[config['sed_aggradation'],
                    config['natural_subsidence'],
                    config['groundwater_subsidence'],
                    config['oilgas_subsidence'],
                    config['gia_uplift'].format(ext='pd')],
            eustatic_slr=0,
            target=config['rslr_land'],
            action=ps.compute_rslr)

    myCommand(
            source=config['rslr'],
            target=config['rslr_plot'].format(ext='png'),
            action=[psed.plot_delta_scalars,
                    'convert -trim $TARGET $TARGET'],
            scenarios=config['name'],
            ylabel='RSLR, mm/yr',
            xlabel='Delta',
            title='Relative Sea-Level Rise Rate',
            )
    myCommand(
            source=[config['rslr'],
                    config['rslr_lit']],
            target=config['rslr_plot_lit'].format(ext='png'),
            action=[psed.plot_delta_scalars_lit,
                    'convert -trim $TARGET $TARGET'],
            scenarios=config['name'],
            ylabel='RSLR, mm/yr',
            xlabel='Delta',
            title='Relative Sea-Level Rise Rate',
            )

    if experiment not in ['pristine', 'pristine-progradation', 'pristine-const-nat-sub', 'contemp-const-nat-sub']:
        myCommand(
                source=[config['natural_subsidence'],
                        config['sed_aggradation'],
                        config['groundwater_subsidence'],
                        config['oilgas_subsidence'],
                        config['rslr_lit']],
                target=[config['rslr_regress'].format(ext='pd'),
                        config['rslr_regress'].format(ext='txt')],
                action=ps.rslr_regression_model,
                eustatic_slr=config['eustatic_slr'])

for expA in experiments.keys():
    for expB in experiments[expA]['compare_with']:
        scenarios = expA + '_' + expB
        if 'pristine' in [expA, expB]:
            exp, expi = ((expA, 0) if expA != 'pristine' else (expB, 1))
            myCommand(
                    source=experiments[exp]['rslr'],
                    target=experiments[exp]['rslr_comparison_plot'].format(scenarios=scenarios, ext='png'),
                    action=[psed.plot_delta_scalars,
                            'convert -trim $TARGET $TARGET'],
                    scenarios=[experiments[exp]['name']],
                    ylabel='RSLR, mm/yr',
                    xlabel='Delta',
                    title='RSLR scenario differences',
                    exp_num=expi, # for color cycle control
                    )
            myCommand(
                    source=[experiments[exp]['rslr'],
                            experiments[exp]['rslr_lit']],
                    target=experiments[exp]['rslr_comparison_plot_lit'].format(scenarios=scenarios, ext='png'),
                    action=[psed.plot_delta_scalars_lit,
                            'convert -trim $TARGET $TARGET'],
                    scenarios=[experiments[exp]['name']],
                    ylabel='RSLR, mm/yr',
                    xlabel='Delta',
                    title='RSLR scenario differences',
                    exp_num=expi, # for color cycle control
                    )
            continue
        myCommand(
                source=[experiments[expA]['rslr'],
                        experiments[expB]['rslr']],
                target=experiments[expA]['rslr_comparison_plot'].format(scenarios=scenarios, ext='png'),
                action=[psed.plot_delta_scalars,
                        'convert -trim $TARGET $TARGET'],
                scenarios=[experiments[expA]['name'], experiments[expB]['name']],
                ylabel='RSLR, mm/yr',
                xlabel='Delta',
                title='RSLR scenario differences',
                )
        myCommand(
                source=[experiments[expA]['rslr'],
                        experiments[expB]['rslr'],
                        experiments[expA]['rslr_lit']],
                target=experiments[expA]['rslr_comparison_plot_lit'].format(scenarios=scenarios, ext='png'),
                action=[psed.plot_delta_scalars_lit,
                        'convert -trim $TARGET $TARGET'],
                scenarios=[experiments[expA]['name'], experiments[expB]['name']],
                ylabel='RSLR, mm/yr',
                xlabel='Delta',
                title='RSLR scenario differences',
                )

        myCommand(
                source=[experiments[expA]['rslr'],
                        experiments[expB]['rslr']],
                target=experiments[expA]['rslr_change_plot'].format(scenarios=scenarios, expA=expA, expB=expB, ext='png'),
                action=[psed.plot_scalars_percent_change,
                        'convert -trim $TARGET $TARGET'],
                scenarios=[experiments[expA]['name'], experiments[expB]['name']],
                ylabel='RSLR change, %',
                xlabel='Delta',
                title='RSLR scenario % change',
                )
        myCommand(
                source=[experiments[expB]['rslr'],
                        experiments[expA]['rslr']],
                target=experiments[expA]['rslr_change_plot'].format(scenarios=scenarios, expA=expB, expB=expA, ext='png'),
                action=[psed.plot_scalars_percent_change,
                        'convert -trim $TARGET $TARGET'],
                scenarios=[experiments[expB]['name'], experiments[expA]['name']],
                ylabel='RSLR change, %',
                xlabel='Delta',
                title='RSLR scenario % change',
                )

myCommand(
        source=[experiments['contemp-prograde']['rslr'],
                experiments['US-reservoir-utilization']['rslr'],
                experiments['retention-low']['rslr'],
                experiments['USresutil-and-retentionlow']['rslr'],
                experiments['contemp']['rslr_lit']],
        target=experiments['contemp']['rslr_plot_contemp_USres_lowretention_lit'],
        action=[psed.plot_delta_scalars_lit,
                'convert -trim $TARGET $TARGET'],
        scenarios=[experiments['contemp-prograde']['name'],
                   experiments['US-reservoir-utilization']['name'],
                   experiments['retention-low']['name'],
                   experiments['USresutil-and-retentionlow']['name']],
        ylabel='RSLR, mm/yr',
        xlabel='Delta',
        title='RSLR scenario differences',
        npanels=2,
        )
