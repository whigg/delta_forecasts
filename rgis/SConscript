# vim: set fileencoding=UTF-8 :
# vim:filetype=python

import os
import process_rgis as pr
import gis

Import('*')

# Download relevant RGIS and BQART datasets from archive on daisy
server = 'ztessler@daisy:'
rgis_remote_dir = server + '/data/RGISarchive/Global/'
bqart_remote_dir = server + '/data/RGISsediment/Global/'
wbm_remote_dir = server + '/data/ModelRuns/'
rgis_files = {
        'basins_rast': os.path.join(
            rgis_remote_dir, 'Network', 'STN+HydroSHEDS', '06min', 'Static',
            'Global_Network_STN+HydroSHEDS_06min_Static.gdbn'),
        'reservoir_rast': os.path.join(
            rgis_remote_dir, 'Reservoir-Capacity', 'UNH661', '06min', 'Static',
            'Global_Reservoir-Capacity_UNH661_06min_aLT2008.gdbc'),
        'airtemp_rast': os.path.join(
            rgis_remote_dir, 'AirTemperature', 'NCEP', '60min', 'Static',
            'Global_AirTemperature_NCEP_60min_aLT1948-2010.gdbc'),
        'relief_rast': os.path.join(
            rgis_remote_dir, 'Elevation', 'ETOPO1bed', '06min', 'Static',
            'Global_Elevation_ETOPO1bed_06min_Static.gdbc'),
        'lithology_rast': os.path.join(
            bqart_remote_dir, 'BQART-Lithology','BQART', '06min', 'Static',
            'Global_BQART-Lithology_BQART_06min_Static.gdbc'),
        'ice_rast': os.path.join(
            bqart_remote_dir, 'Ice-Cover','ICE5Gv102', '30min', 'Static',
            'Global_Ice-Cover_ICE5Gv102_30min_Static.gdbc'),
        # 'gnp_rast': os.path.join(
            # bqart_remote_dir, 'BQART-GNP','BQART', '30min', 'Static',
            # 'Global_BQART-GNP_BQART_30min_Static.gdbc'),
        'discharge_rast': os.path.join(
            wbm_remote_dir, 'CMORPH-GPCP1dd_dTS2003-Present', 'RGISresults',
            'Global', 'Discharge',
            'Global_Discharge_CMORPH-GPCP1dd+Prist_06min_aLT.gdbc.gz'),
        }
for experiment, config in experiments.iteritems():
    for name, remotepath in rgis_files.items():
        if config[name.replace('rast', 'source')][0] not in ['rgis', 'rgis_x2']:
            continue
        localfile = os.path.join('#downloads', os.path.basename(remotepath))
        download = env.Command(
                target=localfile,
                source=None,
                action='scp {} $TARGET'.format(remotepath),
                )
        if localfile[-3:] == '.gz':
            download = env.Command(
                    target=localfile[:-3],
                    source=localfile,
                    action='gunzip $SOURCE')
            localfile = localfile[:-3]
        env.NoClean(download)

        fileroot, fileext = os.path.splitext(localfile)
        ncfile = config[name].format(ver='', ext='nc')
        if fileext == '.gdbc':
            if ('Static' in fileroot) or ('_aLT' in fileroot):
                localfile_0 = localfile
                fileroot_0 ,fileext_0 = fileroot, fileext
                localfile = config[name].format(ver='.1', ext='gdbc')
                fileroot, fileext = os.path.splitext(localfile)
                env.Command(
                        target=localfile,
                        source=localfile_0,
                        action='grdDateLayers -y 1 -e day $SOURCE $TARGET')
            nc = env.Command(
                    target=ncfile,
                    source=localfile,
                    action='rgis2netcdf $SOURCE $TARGET')
        elif name == 'basins_rast':
            env.Command(
                    target=config['basins'].format(ver='', ext='tsv'),
                    source=localfile,
                    action='rgis2table $SOURCE > $TARGET')
            env.Command(
                    target=config['basins'].format(ver='', ext='pd'),
                    source=config['basins'].format(ver='', ext='tsv'),
                    action=pr.tsv_to_pandas)
            env.Command(
                    target=config[name].format(ver='.1', ext='gdbd'),
                    source=localfile,
                    action='netCells2Grid -f BasinID -t BasinID -u BasinID -d Global $SOURCE $TARGET')
            env.Command(
                    target=config[name].format(ver='.2', ext='gdbd'),
                    source=config[name].format(ver='.1', ext='gdbd'),
                    action='grdRenameLayers -r 1 XXXX $SOURCE $TARGET')
            env.Command(
                    target=config[name].format(ver='.3', ext='gdbd'),
                    source=config[name].format(ver='.2', ext='gdbd'),
                    action='grdDateLayers -y 1 -e day $SOURCE $TARGET')
            env.Command(
                    target=ncfile,
                    source=config[name].format(ver='.3', ext='gdbd'),
                    action='rgis2netcdf $SOURCE $TARGET')

        # convert rgis-based nc files to georeferenced gtiffs and regrid to 06min if needed
        if name == 'discharge_rast':
            clippednc = config[name].format(ver='.1', ext='nc')
            env.Command(
                    source=ncfile,
                    target=clippednc,
                    action=pr.clip_nc_neg,
                    varname='discharge')
            ncfile = clippednc
        tiffile = config[name].format(ver='.1', ext='tif')
        tiffile_06min = config[name].format(ver='', ext='tif')
        env.Command(
                target=tiffile,
                source=ncfile,
                action=gis.georef_nc)
        env.Command(
                target=tiffile_06min,
                source=tiffile,
                action=gis.regrid_to_06min)
